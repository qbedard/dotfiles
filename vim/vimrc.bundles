" --------------------
"       Plugins
" --------------------

" ----- Install vim-plug -----
if empty(glob('$HOME/.vim/autoload/plug.vim'))
  silent !curl -fLo $HOME/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" ----- Install Plugins -----
filetype off
call plug#begin('$HOME/.vim/plugged') "

" /--- Start Plugins ---\

" - GUI -
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
Plug 'easymotion/vim-easymotion'
Plug 'mhinz/vim-startify'

" - Fuzzy Search & Tags -
Plug 'haya14busa/incsearch.vim'
Plug 'ctrlpvim/ctrlp.vim'
if executable('ctags')
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
endif
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Plug 'junegunn/fzf.vim'
" Plug 'sunaku/vim-shortcut'

" - Editing -
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'editorconfig/editorconfig-vim'
Plug 'Valloric/MatchTagAlways'
Plug 'junegunn/vim-easy-align'

" - Git -
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/gv.vim'

" - Language -
Plug 'hail2u/vim-css3-syntax'
Plug 'tpope/vim-liquid'
Plug 'tmhedberg/simpylfold'

" - Completion & Linting -
if v:version >= 705
  Plug 'valloric/youcompleteme'
else
  Plug 'ajh17/VimCompletesMe'
endif
" Plug 'scrooloose/syntastic'
Plug 'neomake/neomake'
" Plug 'klen/python-mode'
Plug 'mattn/emmet-vim'

" - Snippets -
Plug 'ervandew/supertab'
Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'

" - Notes -
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }

" - Preview -
" Plug 'JamshedVesuna/vim-markdown-preview'
Plug 'suan/vim-instant-markdown'

" - Writing -
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" \---- End Plugins ----/

call plug#end()

if has('autocmd')
  filetype plugin indent on
endif


" ----- Plugin Config -----

" --- Theme ---
colorscheme gruvbox


" --- airline ---
let g:airline_theme='gruvbox'
let g:airline#extensions#tabline#enabled = 1


" --- CtrlP ---
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_cmd = 'CtrlPMixed'

" ignore some folders and files for CtrlP indexing
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.git|\.hg|\.svn|public|tmp|var|Applications|Library)$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$|\.zip|\.pdf|\.tar|\.dmg'
  \ }

" use ag instead of grep if available
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif


" --- EasyMotion ---
map \ <Plug>(easymotion-prefix)

" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)


" --- Emmet ---
"  default is <C-Y>
" let g:user_emmet_leader_key=','


" --- Fugitive ---
" :command Gadd Git add %


" --- GitGutter ---
if exists('&signcolumn')  " Vim 7.4.2201
    set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif
highlight clear SignColumn


" --- Gutentags ---
if &runtimepath =~ 'vim-gutentags'
  let g:gutentags_cache_dir = '~/.vim/tags'
endif


" --- incsearch ---
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)


" --- Instant Markdown ---

" --- LimeLight ---
nmap <Leader>l <Plug>(Limelight)
xmap <Leader>l <Plug>(Limelight)
" let g:limelight_conceal_ctermfg = 245
let g:limelight_conceal_ctermfg = 'gray'
" let g:limelight_conceal_guifg = '#928374'
let g:limelight_conceal_guifg = 'DarkGray'


" --- Markdown Preview ---
" let vim_markdown_preview_toggle=2
" let vim_markdown_preview_hotkey='<leader>m'
" let vim_markdown_preview_github=1
" let vim_markdown_preview_browser='Google Chrome'
" let vim_markdown_preview_temp_file=1


" --- MatchTagAlways ---
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'htmldjango' : 1,
    \ 'liquid': 1,
    \}


" --- NeoMake ---
" lint when writing a buffer.

if has('nvim') || v:version >= 800
  call neomake#configure#automake('nrw', 500)
else
  call neomake#configure#automake('rw')
endif

" pylint is super noisy, so let's stick to flake8.
let g:neomake_python_flake8_maker = {
    \ 'args': ['--max-line-length=160', '--format=default'],
    \ 'errorformat':
        \ '%E%f:%l: could not compile,%-Z%p^,' .
        \ '%A%f:%l:%c: %t%n %m,' .
        \ '%A%f:%l: %t%n %m,' .
        \ '%-G%.%#',
        \ 'postprocess': function('neomake#makers#ft#python#Flake8EntryProcess')
    \ }
let g:neomake_python_enabled_makers = ['flake8']

let g:neomake_python_flake8_args = ['--max-line-length=160', '--format=default']


" --- NERDTree ---
map <C-n> :NERDTreeToggle<CR>
map Ëœ :NERDTreeFind<CR>

" shortcut
" Shortcut show shortcut menu and run chosen shortcut
"       \ noremap <silent> <Leader><Leader> :Shortcuts<Return>
" Shortcut fallback to shortcut menu on partial entry
"       \ noremap <silent> <Leader> :Shortcuts<Return>


" --- SimplyFold ---
let g:SimpylFold_docstring_preview = 1


" --- Startify ---
let g:startify_change_to_vcs_root = 1
let g:startify_session_autoload = 1
let g:startify_custom_header = startify#fortune#boxed()


" --- SuperTab ---
let g:SuperTabDefaultCompletionType = '<C-n>'


" --- Tagbar ---
if &runtimepath =~ 'vim-gutentags'
  nmap <leader>t :TagbarToggle<CR>
endif


" --- UltiSnips ---
" let g:UltiSnipsExpandTrigger="<cr>"
" let g:UltiSnipsJumpForwardTrigger="<c-j>"
" let g:UltiSnipsJumpBackwardTrigger="<c-k>"


" --- Vimwiki ---
let g:vimwiki_list = [{'path': '~/vimwiki',
                     \ 'syntax': 'markdown', 'ext': '.wiki'}]

" --- vim-easy-align ---
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


" --- YouCompleteMe ---
if &runtimepath =~ 'youcompleteme'
  let g:ycm_autoclose_preview_window_after_completion=1
  let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
  let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
endif
