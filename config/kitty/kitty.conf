# ~/.config/kitty/kitty.conf

# font_family Hack
font_family Iosevka Extended
# font_family Monaspace Neon
# font_family Monaspace Neon Var
font_size 12.0

# - Nerd Fonts v3.1.0 - #
# https://github.com/ryanoasis/nerd-fonts/wiki/Glyph-Sets-and-Code-Points
symbol_map U+E5fa-U+E6b1,U+E5FA-U+E6B1,U+E700-U+E7C5,U+F000-U+F2E0,U+E200-U+E2A9,U+F0001-U+F1AF0,U+E300-U+E3E3,U+F400-U+F532,U+2665,U+26A1,U+E0A0-U+E0A2,U+E0B0-U+E0B3,U+E0A3,E0B4-U+E0C8,U+E0CA,U+E0CC-U+E0D4,U+23FB-U+23FE,U+2B58,U+F300-U+F372,U+E000-U+E00A,U+EA60-U+EBEB,U+E276C-U+2771,U+2500-U+259F Symbols Nerd Font Mono

active_tab_font_style   bold
inactive_tab_font_style normal

modify_font underline_position +2
modify_font underline_thickness 150%
undercurl_style thin-dense

include themes/gruvbox_dark_medium.conf

mouse_hide_wait 5.0

enable_audio_bell no

#: The enabled window layouts. A comma separated list of layout names.
#: The special value all means all layouts. The first listed layout
#: will be used as the startup layout. For a list of available
#: layouts, see the https://sw.kovidgoyal.net/kitty/layouts/.
# enabled_layouts *

#: The step size (in units of cell width/cell height) to use when
#: resizing windows. The cells value is used for horizontal resizing
#: and the lines value for vertical resizing.
# window_resize_step_cells 2
# window_resize_step_lines 2

# window_border_width 1.0
draw_minimal_borders yes
# window_margin_width 0.0
# single_window_margin_width -1
# window_padding_width 0.0
# placement_strategy center

# hide_window_decorations yes

#: Choose how kitty draws a window while a resize is in progress. A
#: value of static means draw the current window contents, mostly
#: unchanged. A value of scale means draw the current window contents
#: scaled. A value of blank means draw a blank window. A value of size
#: means show the window size in cells.
# resize_draw_strategy static

# tab_bar_margin_width 0.0
tab_bar_style powerline
# tab_bar_min_tabs 2

background_opacity 0.97

# shell .
# editor .

#: Specify environment variables to set in all child processes. Note
#: that environment variables are expanded recursively, so if you
#: use::
#:     env MYVAR1=a
#:     env MYVAR2=${MYVAR1}/${HOME}/b
#: The value of MYVAR2 will be a/<path to home directory>/b.
# env

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session command line option for
#: individual instances. See
#: https://sw.kovidgoyal.net/kitty/index.html#sessions in the kitty
#: documentation for details. Note that relative paths are interpreted
#: with respect to the kitty config directory. Environment variables
#: in the path are expanded.
# startup_session none

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: set of possible actions is: write-clipboard read-clipboard write-
#: primary read-primary. You can additionally specify no-append to
#: disable kitty's protocol extension for clipboard concatenation. The
#: default is to allow writing to the clipboard and primary selection
#: with concatenation enabled. Note that enabling the read
#: functionality is a security risk as it means that any program, even
#: one running on a remote server via SSH can read your clipboard.
clipboard_control no-append write-clipboard write-primary

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on Stack Overflow
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work.
term xterm-kitty
# term xterm-256color

#: Use the option key as an alt key. With this set to no, kitty will
#: use the macOS native Option+Key = unicode character behavior. This
#: will break any Alt+key keyboard shortcuts in your terminal
#: programs, but you can use the macOS unicode input technique. You
#: can use the values: left, right, or both to use only the left,
#: right or both Option keys as Alt, instead.
macos_option_as_alt yes

macos_quit_when_last_window_closed yes

#: Draw an extra border around the font with the given width, to
#: increase legibility at small font sizes. For example, a value of
#: 0.75 will result in rendering that looks similar to sub-pixel
#: antialiasing at common font sizes.
macos_thicken_font 0.4

#: Enable/disable custom mouse cursor for macOS that is easier to see
#: on both light and dark backgrounds. WARNING: this might make your
#: mouse cursor invisible on dual GPU machines.
# macos_custom_beam_cursor no

# kitty_mod ctrl+shift
# clear_all_shortcuts no

# uses newest process
# map kitty_mod+enter new_window_with_cwd
# map cmd+enter new_window_with_cwd

# uses oldest process
map kitty_mod+enter launch --cwd=oldest
map cmd+enter launch --cwd=oldest

map kitty_mod+n next_window
map kitty_mod+p previous_window

#: You can open a new window next to the currently active window or as
#: the first window, with::
#:     map ctrl+n new_window !neighbor some_program
#:     map ctrl+f new_window !first some_program

map kitty_mod+h neighboring_window left
map kitty_mod+j neighboring_window down
map kitty_mod+k neighboring_window up
map kitty_mod+l neighboring_window right

map kitty_mod+up move_window up
map kitty_mod+left move_window left
map kitty_mod+right move_window right
map kitty_mod+down move_window down

# map kitty_mod+b move_window_backward
# map kitty_mod+f move_window_forward
# map kitty_mod+` move_window_to_top
# map kitty_mod+r start_resizing_window
# map cmd+r       start_resizing_window

# map kitty_mod+up next_tab
# map kitty_mod+down previous_tab
# map kitty_mod+right next_tab
# map ctrl+tab        next_tab
# map shift+cmd+]     next_tab
# map kitty_mod+left  previous_tab
# map shift+ctrl+tab  previous_tab
# map shift+cmd+[     previous_tab
# map kitty_mod+t     new_tab
# map cmd+t           new_tab
# map kitty_mod+q     close_tab
# map cmd+w           close_tab
# map kitty_mod+.     move_tab_forward
# map kitty_mod+,     move_tab_backward
# map kitty_mod+alt+t set_tab_title
# map shift+cmd+i     set_tab_title

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd. Finally, if you want the new tab to open next to
#: the current tab rather than at the end of the tabs list, use::
#:     map ctrl+t new_tab !neighbor [optional cmd to run]

map kitty_mod+y next_layout

map kitty_mod+o layout_action rotate

map ctrl+[ layout_action decrease_num_full_size_windows
map ctrl+] layout_action increase_num_full_size_windows

#: You can also create shortcuts to switch to specific layouts::
#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::
#:    map ctrl+alt+p last_used_layout

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.
#: To setup shortcuts to change only the current OS window's font
#: size::
#:     map kitty_mod+f6 change_font_size current 10.0
map cmd+plus change_font_size all +1.0
map cmd+equal change_font_size all +1.0
map cmd+minus change_font_size all -1.0

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.
# map kitty_mod+e kitten hints

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.
# map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and open it with the default open program.
# map kitty_mod+p>shift+f kitten hints --type path

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1
# map kitty_mod+p>l kitten hints --type line --program -

#: Select words and insert into terminal.
# map kitty_mod+p>w kitten hints --type word --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits
# map kitty_mod+p>h kitten hints --type hash --program -

# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+f10    toggle_maximized
# map kitty_mod+f2     edit_config_file

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.
# map kitty_mod+escape kitty_shell window

#: Remap Ctrl+L to both scroll the current screen contents into the scrollback
#: buffer and clear the screen, instead of just clearing the screen.
map ctrl+l combine : clear_terminal scroll active : send_text normal,application \x0c

#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: client program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH
